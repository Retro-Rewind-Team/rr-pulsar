#ifndef _SETTINGS_PARAMS_
#define _SETTINGS_PARAMS_

#include <kamek.hpp>
#include <PulsarSystem.hpp>
#include <Config.hpp>

namespace Pulsar {
namespace UI {
class SettingsPanel;
}
namespace Settings {

class Params {
   public:
    static const int pulsarPageCount = 5;
    static const int userPageCount = 3;
    static const int pageCount = pulsarPageCount + userPageCount;

    static const int maxRadioCount = 8;  // per page, due to space
    static const int maxScrollerCount = 5;  // per page, due to space

    // Pulsar and User
    static u8 radioCount[pageCount];
    static u8 scrollerCount[pageCount];
    static u8 buttonsPerPagePerRow[pageCount][maxRadioCount];
    static u8 optionsPerPagePerScroller[pageCount][maxScrollerCount];
};

// Contains all the settings.
enum Type {
    SETTINGSTYPE_MENU,
    SETTINGSTYPE_RACE,
    SETTINGSTYPE_HOST,
    SETTINGSTYPE_OTT,
    SETTINGSTYPE_KO
};

// If you want to add settings to your packs, they go in this enum, and GetUserSettingValue should be used to obtain the value of a given setting
enum UserType {
    SETTINGSTYPE_RR,
    SETTINGSTYPE_RRHOST,
    SETTINGSTYPE_RRLANGUAGE
};

}  // namespace Settings

// SETTINGS ENUM, for the page, DO NOT FORGET THE +6 for scrollers (see menu settings for example)
// Use these 3 for "u32 setting" in GetSettingValue, the return will be the value of the other enums
enum MenuSettings {
    SETTINGMENU_RADIO_FASTMENUS = 0,
    SETTINGMENU_RADIO_LAYOUT = 1,
    SETTINGMENU_RADIO_MUSIC = 2,
    SETTINGMENU_RADIO_PREDICTIONREMOVAL = 3,
    SETTINGMENU_SCROLL_BOOT = 0 + 8,
    SETTINGMENU_SCROLL_CUSTOMCHARACTER = 1 + 8
};

enum RaceSettings {
    SETTINGRACE_RADIO_MII,
    SETTINGRACE_RADIO_SPEEDUP,
    SETTINGRACE_RADIO_BATTLE,
    SETTINGRACE_RADIO_BLUES,
    SETTINGRACE_RADIO_SOM,
    SETTINGRACE_RADIO_BLOOM,
    SETTINGRACE_RADIO_ELIMINATION,
    SETTINGRACE_SCROLL_SOM = 0 + 8
};

enum HostSettings {
    SETTINGHOST_RADIO_HOSTWINS = 0,
    SETTINGHOST_RADIO_CC = 1,
    SETTINGHOST_ALLOW_MIIHEADS = 2,
    SETTINGHOST_RADIO_BATTLETEAMS = 3,
    SETTINGHOST_SCROLL_GP_RACES = 0 + 8
};

enum OTTSettings {
    SETTINGOTT_ONLINE = 0,
    SETTINGOTT_OFFLINE = 1,
    SETTINGOTT_ALLOWCHANGECOMBO = 2,
    SETTINGOTT_ALLOWUMTS = 3,
    SETTINGOTT_MUTEPTANDPLAYERS = 4
};

enum KOSettings {
    SETTINGKO_ENABLED = 0,
    SETTINGKO_FINAL = 1,
    SETTINGKO_KOPERRACE = 0 + 8,
    SETTINGKO_RACESPERKO = 1 + 8
};

enum RRettings {
    SETTINGRR_RADIO_TRANSMISSION = 0,
    SETTINGRR_RADIO_HARDAI = 1,
    SETTINGRR_RADIO_BRAKEDRIFT = 2,
    SETTINGRR_RADIO_FOV = 3,
    SETTINGRR_RADIO_CTMUSIC = 4,
    SETTIGNRR_RADIO_FPS = 5,
    SETTINGRR_RADIO_INPUTDISPLAY = 6,
    SETTINGRR_RADIO_RANDOMBUTTON = 7,
    SETTINGRR_SCROLLER_WWMODE = 0 + 8,
};

enum RRHostSettings {
    SETTINGRR3_RADIO_KARTSELECT = 0,
    SETTINGRR3_RADIO_CHARSELECT = 1,
    SETTINGRR3_RADIO_ITEMBOXRESPAWN = 2,
    SETTINGRR3_RADIO_THUNDERCLOUD = 3,
    SETTINGRR3_RADIO_EXTENDEDTEAMS = 4,
    SETTINGRR3_RADIO_FORCETRANSMISSION = 5,
    SETTINGRR3_SCROLLER_ITEMMODE = 0 + 8,
    SETTINGRR3_SCROLLER_TRACKSELECTION = 1 + 8
};

enum RRLanguageSettings {
    SETTINGRRLANGUAGE_LANGUAGE = 0 + 8,
};

// MENU SETTINGS
enum MenuSettingFastMenus {
    MENUSETTING_FASTMENUS_DISABLED = 0x0,
    MENUSETTING_FASTMENUS_ENABLED = 0x1
};

enum MenuSettingLayout {
    MENUSETTING_LAYOUT_DEFAULT = 0x0,
    MENUSETTING_LAYOUT_ALPHABETICAL = 0x1
};

enum MenuSettingMusic {
    MENUSETTING_MUSIC_DEFAULT = 0x0,
    MENUSETTING_MUSIC_DISABLE_ALL = 0x1,
    MENUSETTING_MUSIC_DISABLE_RACE = 0x2
};

enum MenuSettingPredictionRemoval {
    MENUSETTING_PREDICTIONREMOVAL_DISABLED = 0x0,
    MENUSETTING_PREDICTIONREMOVAL_ENABLED = 0x1
};

enum MenuSettingBoot {
    MENUSETTING_BOOT_DISABLED,
    MENUSETTING_BOOT_L1,
    MENUSETTING_BOOT_L2,
    MENUSETTING_BOOT_L3,
    MENUSETTING_BOOT_L4
};

enum MenuSettingCustomCharacter {
    MENUSETTING_CUSTOMCHARACTER_DISABLED = 0x0,
    MENUSETTING_CUSTOMCHARACTER_ENABLED = 0x1
};

// RACE SETTINGS
enum RaceSettingMII {
    RACESETTING_MII_DISABLED = 0x0,
    RACESETTING_MII_ENABLED = 0x1
};

enum RaceSettingSPEEDUP {
    RACESETTING_SPEEDUP_DISABLED = 0x0,
    RACESETTING_SPEEDUP_ENABLED = 0x1
};

enum RaceSettingBATTLE {
    RACESETTING_BATTLE_GLITCH_DISABLED = 0x0,
    RACESETTING_BATTLE_GLITCH_ENABLED = 0x1
};

enum RaceSettingBLUES {
    RACESETTING_DRAGGABLE_BLUES_DISABLED = 0x0,
    RACESETTING_DRAGGABLE_BLUES_ENABLED = 0x1
};

enum RaceSettingSOM {
    RACESETTING_SOM_LEFT = 0x0,
    RACESETTING_SOM_RIGHT = 0x1,
    RACESETTING_SOM_DISABLED = 0x2
};

enum RaceSettingBLOOM {
    RACESETTING_BLOOM_DISABLED = 0x0,
    RACESETTING_BLOOM_ENABLED = 0x1
};

enum RaceSettingElimination {
    RACESETTING_ELIMINATION_DISABLED = 0x0,
    RACESETTING_ELIMINATION_ENABLED = 0x1
};

enum RaceSettingSOMDigits {
    HOSTSETTING_SOM_DIGITS_0,
    HOSTSETTING_SOM_DIGITS_1,
    HOSTSETTING_SOM_DIGITS_2,
    HOSTSETTING_SOM_DIGITS_3
};

// HOST SETTINGS
enum HostSettingHAW {
    HOSTSETTING_HOSTWINS_DISABLED,
    HOSTSETTING_HOSTWINS_ENABLED
};

enum HostSettingHostCC {
    HOSTSETTING_CC_NORMAL,
    HOSTSETTING_CC_150,
    HOSTSETTING_CC_100,
    HOSTSETTING_CC_500
};

enum HostSettingMiiHeads {
    HOSTSETTING_ALLOW_MIIHEADS_ENABLED,
    HOSTSETTING_ALLOW_MIIHEADS_DISABLED
};

enum BattleTeams {
    BATTLE_TEAMS_DISABLED,
    BATTLE_TEAMS_ENABLED
};

enum HostSettingGPRACES {
    HOSTSETTING_GP_RACES_4,
    HOSTSETTING_GP_RACES_8,
    HOSTSETTING_GP_RACES_12,
    HOSTSETTING_GP_RACES_24,
    HOSTSETTING_GP_RACES_32,
    HOSTSETTING_GP_RACES_64,
    HOSTSETTING_GP_RACES_2
    // space for a 7th setting is available
};

// OTT SETTINGS
enum OTTSettingOnline {
    OTTSETTING_ONLINE_DISABLED,
    OTTSETTING_ONLINE_NORMAL,
    OTTSETTING_ONLINE_FEATHER
};

enum OTTSettingOffline {
    OTTSETTING_OFFLINE_DISABLED,
    OTTSETTING_OFFLINE_NORMAL,
    OTTSETTING_OFFLINE_FEATHER
};

enum OTTSettingCombo {
    OTTSETTING_COMBO_DISABLED,
    OTTSETTING_COMBO_ENABLED
};

enum OTTSettingUMTs {
    OTTSETTING_UMTS_DISABLED,
    OTTSETTING_UMTS_ENABLED
};

// KO SETTINGS
enum KOSettingEnabled {
    KOSETTING_DISABLED,
    KOSETTING_ENABLED
};

enum KOSettingFINAL {
    KOSETTING_FINAL_DISABLED,
    KOSETTING_FINAL_ALWAYS
};

enum KOSettingKOPerRace {
    KOSETTING_KOPERRACE_1,
    KOSETTING_KOPERRACE_2,
    KOSETTING_KOPERRACE_3,
    KOSETTING_KOPERRACE_4
};

enum KOSettingRacesPerKO {
    KOSETTING_RACESPERKO_1,
    KOSETTING_RACESPERKO_2,
    KOSETTING_RACESPERKO_3,
    KOSETTING_RACESPERKO_4
};

// RR Settings
enum Transmission {
    TRANSMISSION_DEFAULT,
    TRANSMISSION_INSIDEALL,
    TRANSMISSION_INSIDEBIKE,
    TRANSMISSION_OUTSIDE
};

enum HardAI {
    HARDAI_DISABLED,
    HARDAI_ENABLED
};

enum BrakeDrift {
    BRAKEDRIFT_DISABLED,
    BRAKEDRIFT_ENABLED
};

enum FOVChange {
    FOV_CHANGE_DEFAULT,
    FOV_CHANGE_16_9,
    FOV_CHANGE_4_3
};

enum CTMusic {
    CTMUSIC_ENABLED,
    CTMUSIC_DISABLED
};

enum FPS {
    FPS_DEFAULT,
    FPS_HALF
};

enum InputDisplay {
    INPUTDISPLAY_DISABLED,
    INPUTDISPLAY_ENABLED
};

enum RandomButton {
    RANDOMBUTTON_ENABLED,
    RANDOMBUTTON_DISABLED
};

// RRHost Settings
enum KartRestriction {
    KART_DEFAULTSELECTION,
    KART_KARTONLY,
    KART_BIKEONLY
};

enum CharacterRestriction {
    CHAR_DEFAULTSELECTION,
    CHAR_LIGHTONLY,
    CHAR_MEDIUMONLY,
    CHAR_HEAVYONLY
};

enum ItemBoxRespawn {
    ITEMBOX_DEFAULTRESPAWN,
    ITEMBOX_FASTRESPAWN
};

enum ThunderCloud {
    THUNDERCLOUD_MEGA,
    THUNDERCLOUD_NORMAL
};

enum ExtendedTeams {
    EXTENDEDTEAMS_DISABLED,
    EXTENDEDTEAMS_ENABLED
};

enum ForceTransmission {
    FORCE_TRANSMISSION_DEFAULT,
    FORCE_TRANSMISSION_INSIDE,
    FORCE_TRANSMISSION_OUTSIDE,
    FORCE_TRANSMISSION_VANILLA
};

enum ItemMode {
    GAMEMODE_DEFAULT,
    GAMEMODE_RANDOM,
    GAMEMODE_BLAST,
    GAMEMODE_ITEMRAIN,
    GAMEMODE_ITEMSTORM,
    GAMEMODE_NONE
};

enum TrackSelection {
    TRACKSELECTION_RETROS,
    TRACKSELECTION_CTS,
    TRACKSELECTION_ALL,
    TRACKSELECTION_REGS,
};

// RR Language Settings
enum Language {
    LANGUAGE_ENGLISH,
    LANGUAGE_JAPANESE,
    LANGUAGE_FRENCH,
    LANGUAGE_GERMAN,
    LANGUAGE_DUTCH,
    LANGUAGE_SPANISHUS,
    LANGUAGE_SPANISHEU,
    LANGUAGE_FINNISH,
    LANGUAGE_ITALIAN,
    LANGUAGE_KOREAN,
    LANGUAGE_RUSSIAN,
    LANGUAGE_TURKISH,
    LANGUAGE_CZECH,
};

// Extra
enum WWMode {
    WWMODE_DEFAULT,
    WWMODE_OTT,
    WWMODE_200
};

}  // namespace Pulsar

#endif